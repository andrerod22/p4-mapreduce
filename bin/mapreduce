#!/bin/bash
#mapreduce
#Andre Rodriguez

set -Eeuo pipefail
usage() {
  echo "Usage: $0 (start|stop|status|restart"

}
start_server(){
  if pgrep -f "mapreduce-manager" > /dev/null; then
    echo "Error: mapreduce-manager is already running"
    exit 1
  elif pgrep -f "mapreduce-worker" > /dev/null; then
    echo "Error: mapreduce-worker is already running"
    exit 1
  else
    echo "starting mapreduce ..."
    mapreduce-manager 6000 5999 &
    sleep 2
    mapreduce-worker 6000 5999 6001 &
    mapreduce-worker 6000 5999 6002 &
  fi
}

stop_server(){
  # STOP SERVER
  # Detect GNU vs BSD netcat.  We need netcat to close the connection after
  # sending a message, which requires different options.
  set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
  if nc -h 2>&1 | grep -q "\-c"; then
    NC="nc -c"
  elif nc -h 2>&1 | grep -q "\-N"; then
    NC="nc -N"
  elif nc -h 2>&1 | grep -q "\-C"; then
    NC="nc -C"
  else
    echo "Error detecting netcat version."
    exit 1
  fi
  set -o pipefail

  echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
  echo "stopping mapreduce ..."
  sleep 2  # give the master time to receive signal and send to workers
  echo "killing mapreduce manager ..."
  pkill -f mapreduce-manager || true
  echo "killing mapreduce workers ..."
  pkill -f mapreduce-worker || true
}

restart_server(){
  stop_server
  start_server
}

server_status(){
  # Check if processes are running
  # ASK ON PIAZZA: Should we cover the case where master is running but worker is not?
  if pgrep -f "mapreduce-manager" > /dev/null; then
    echo "manager running"
  else 
    echo "manager not running"
  fi
  if pgrep -f "mapreduce-worker" > /dev/null; then
    echo "workers running"
  else
    echo "workers not running"
  fi
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

case $1 in
  "start")
    start_server
    ;;

  "stop")
    stop_server
    ;;

  "status")
    server_status
    ;;

  "restart")
    restart_server
    ;;
    
  *)
    usage
    exit 1
    ;;
esac


